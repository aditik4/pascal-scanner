#BlueJ class context
comment0.params=inString
comment0.target=Scanner(java.lang.String)
comment0.text=\n\ \ \n\ Scanner\ constructor\ for\ constructing\ a\ scanner\ that\ \n\ scans\ a\ given\ input\ string.\ \ It\ sets\ the\ end-of-file\ flag\ an\ then\ reads\n\ the\ first\ character\ of\ the\ input\ string\ into\ the\ instance\ field\ currentChar.\n\ Usage\:\ Scanner\ lex\ \=\ new\ Scanner(input_string);\n\ @param\ inString\ the\ string\ to\ scan\n\n
comment1.params=inStream
comment1.target=Scanner(java.io.InputStream)
comment1.text=\n\ Scanner\ constructor\ for\ construction\ of\ a\ scanner\ that\ \n\ uses\ an\ InputStream\ object\ for\ input.\ \ \n\ Usage\:\ \n\ FileInputStream\ inStream\ \=\ new\ FileInputStream(new\ File(<file\ name>);\n\ Scanner\ lex\ \=\ new\ Scanner(inStream);\n\ @param\ inStream\ the\ input\ stream\ to\ use\n
comment10.params=curr
comment10.target=boolean\ isWhite(char)
comment10.text=\n\ Determines\ whether\ or\ not\ the\ character\ is\ a\ white\ space\n\ @param\ curr\ the\ character\ to\ examine\n\ @return\ true\ if\ the\ char\ is\ a\ white\ space;\ otherwise,\ \n\ \ \ \ \ \ \ \ \ \ false.\n
comment11.params=curr
comment11.target=boolean\ isOperator(char)
comment11.text=\n\ Determines\ whether\ or\ not\ the\ charcter\ is\ an\ operator\n\ @param\ curr\ the\ character\ to\ examine\n\ @return\ true\ if\ the\ character\ is\ an\ operator;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n\ \n
comment12.params=
comment12.target=java.lang.String\ scanNumber()
comment12.text=\n\ Scans\ the\ input\ for\ a\ digit\ or\ group\ of\ digits\n\ @return\ the\ lexeme\n\ @throws\ ScanErrorException\ if\ lexeme\ is\ not\ recognized\n\ @postcondition\ the\ currentCharacter\ is\ set\ to\ the\ char\ after\ the\ set\ of\ digits\n
comment13.params=
comment13.target=java.lang.String\ scanOperand()
comment13.text=\n\ Scans\ the\ input\ for\ an\ operand\ token\n\ @return\ the\ lexeme\n\ @throws\ ScanErrorException\ if\ no\ lexeme\ recognized\n\ @postcondition\ currentChar\ is\ set\ to\ the\ character\ after\ the\ operand\n
comment14.params=
comment14.target=java.lang.String\ scanIdentifier()
comment14.text=\n\ Scans\ the\ input\ for\ an\ identifier\ token\n\ @return\ the\ lexeme\n\ @throws\ ScanErrorException\ if\ lexeme\ is\ not\ regognizeed.\n\ \n\ @postcondition\ currentChar\ is\ set\ to\ the\ char\ after\ the\ identifier/\ set\ of\ identifiers\n
comment15.params=
comment15.target=java.lang.String\ nextToken()
comment15.text=\n\ Scans\ next\ token\ in\ input\ stream\n\ @return\ a\ string\ representing\ the\ type\ of\ token\ found\:\ number,\ identifiyer,\ operand\n\ \n
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\n\ Runs\ the\ scanner,\ creates\ tokens\ from\ file\n\ @param\ args\ the\ args\ of\ method\n\ @throws\ ScanErrorException\ if\ no\ input\ found\n\ @prostcondition\ the\ file\ have\ been\ tokenized\ until\ a\ period\ or\ end\n\ of\ file\ has\ been\ reached\n
comment2.params=
comment2.target=void\ getNextChar()
comment2.text=\n\ The\ getNextChar\ method\ attempts\ to\ get\ the\ next\ character\ from\ the\ input\n\ stream.\ \ It\ sets\ the\ endOfFile\ flag\ true\ if\ the\ end\ of\ file\ is\ reached\ on\n\ the\ input\ stream.\ \ Otherwise,\ it\ reads\ the\ next\ character\ from\ the\ stream\n\ and\ converts\ it\ to\ a\ Java\ String\ object.\n\ @postcondition\:\ The\ input\ stream\ is\ advanced\ one\ character\ if\ it\ is\ not\ at\n\ end\ of\ file\ and\ the\ currentChar\ instance\ field\ is\ set\ to\ the\ String\ \n\ representation\ of\ the\ character\ read\ from\ the\ input\ stream.\ \ The\ flag\n\ endOfFile\ is\ set\ true\ if\ the\ input\ stream\ is\ exhausted.\n
comment3.params=
comment3.target=boolean\ hasNext()
comment3.text=\n\ Determines\ whether\ the\ input\ stream\ has\ another\ character\n\ @return\ true\ if\ there\ is\ a\ another\ character;\ otherwise,\n\ \ \ \ \ \ \ \ \ false.\n\ \ \ \ \ \ \ \ \n
comment4.params=curr
comment4.target=void\ eat(char)
comment4.text=\n\ Takes\ in\ a\ String\ object\ and\ then\ compares\ it\ to\ the\ currentChar\ instance\ field\n\ \ \ \ @param\ curr\ the\ string\ to\ be\ eaten\n\ \ \ \ @throws\ ScanErrorException\ if\ char\ is\ missing\n\ \ \ \ @postcondition\ currentChar\ is\ set\ to\ the\ next\ character\ in\ the\ stream\n\n
comment5.params=curr
comment5.target=boolean\ isDigit(char)
comment5.text=\n\ Determines\ if\ the\ string\ is\ a\ digit\n\ @param\ curr\ the\ string\ to\ examine\n\ @return\ true\ if\ the\ character\ is\ a\ digit;\ otherwise,\ false.\n
comment6.params=curr
comment6.target=boolean\ isLetter(char)
comment6.text=\n\ Determines\ if\ the\ paramater\ string\ is\ a\ digit\n\ @param\ curr\ the\ char\ to\ examine\n\ @return\ true\ if\ it\ is\ a\ digit;\ otherwise,\n\ \ \ \ \ \ \ \ \ false\n
comment7.params=curr
comment7.target=boolean\ isSpecial(char)
comment7.text=\n\ Determines\ whether\ or\ not\ the\ character\ is\ a\ special\ char\n\ @param\ curr\ the\ character\ to\ examine\n\ @return\ true\ if\ it\ is\ a\ special\ char;\ otherwise,\n\ \ \ \ \ \ \ \ \ false.\n
comment8.params=curr
comment8.target=boolean\ isPhraseTerminator(char)
comment8.text=\n\ Determines\ if\ the\ char\ is\ a\ phase\ terminator\n\ @param\ curr\ the\ character\ to\ examine\n\ @return\ true\ if\ the\ character\ is\ a\ terminator;\ otherwise,\n\ \ \ \ \ \ \ \ \ false.\n
comment9.params=curr
comment9.target=boolean\ isSentTerminator(char)
comment9.text=\n\ Determines\ if\ the\ char\ is\ a\ sentence\ terminator\n\ @param\ curr\ the\ character\ to\ examine\n\ @return\ true\ if\ it\ is\ a\ sent\ terminator;\ otherwise,\n\ \ \ \ \ \ \ \ \ \ false\n\n
numComments=17
